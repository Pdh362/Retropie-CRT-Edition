#!/usr/bin/python
# coding: utf-8
# Original idea/coded by Ironic/aTg (2017) for RGB-Pi recalbox
# Retropie code/integration by -krahs- (2019)
#
# unlicense.org
#
# This script can be heavily optimized.

# IMPORTS
import struct
import time
import pygame
import sys
from pygame.locals import *

os.system('clear')

# INITS
pygame.init()
pygame.joystick.init()
pygame.mouse.set_visible(0)

# VARIABLES
state_up = 0
state_down = 0
state_left = 0
state_right = 0
threshold = 1000 # Analogic middle to debounce
joystick = 0 # 0 is the 1sf joystick

x_screen = 450
y_screen = 270

opt = 0
running = 1
x = 0
y = 0
y_slide = 0

#positions and colors
data_x = 320
color = [0,200,0]
black = [0,0,0]
dark = [0,100,0]

#files
netplaycfg = '/opt/retropie/configs/all/CRT/netplay.cfg'

# FUNCTIONS
def text_print(txt, x, y, r, g, b):
	fullscreen.blit(myfont.render(txt, 1, (r,g,b)), (x, y))

def draw_arrow_left():
	fullscreen.blit((myfont.render('<', 1, (black))), (data_x-(len(str(opt[option][2]))*8)-10, 50+y*20))

def draw_arrow_right():
	fullscreen.blit((myfont.render('>', 1, (black))), (data_x+2, 50+y*20))

def save():
	saveFile = open(netplaycfg, 'w')
	optS = str(opt[0][2]) + ' ' + str(opt[1][2]) + ' ' + str(opt[2][2]) + ' ' + str(opt[2][3]) + ' ' + str(opt[2][4]) + ' ' + str(opt[2][5]) + ' ' + str(opt[3][2]) + ' ' + str(opt[3][3]) + ' ' + str(opt[3][4]) + ' ' + str(opt[3][5]) + ' ' + str(opt[4][2]) + ' ' + str(opt[4][3]) + ' ' + str(opt[4][4]) + ' ' + str(opt[4][5]) + ' ' + str(opt[5][2]) + ' ' + str(opt[5][3]) + ' ' + str(opt[5][4]) + ' ' + str(opt[5][5]) + ' ' + str(opt[6][2]) + ' ' + str(opt[6][3]) + ' ' + str(opt[6][4]) + ' ' + str(opt[6][5]) + ' ' + str(opt[7][2]) + ' ' + str(opt[7][3]) + ' ' + str(opt[7][4]) + ' ' + str(opt[7][5])

	saveFile.write(optS)
	saveFile.close()


# SET SCREEN
fullscreen = pygame.display.set_mode((x_screen,y_screen), RESIZABLE)
fullscreen.fill((0,0,0))

# FONT
myfont = pygame.font.Font('/opt/retropie/configs/all/CRT/config/PetMe64.ttf', 8)

	
# loading data from su.cfg
spaceCount = 0
opt = [["SERVER HOST ENABLED" ,"Open port forwarding 55435 to your Pi IP" , 0],
	["CLIENT CONNECT TO IP No." , "Select your server host IP from 1 to 6" , 0],
	["IP No.1" , "SONIC box. Press buttons to change the IP" , 0, 0, 0, 0],
	["IP No.2" , "MARIO box. Press buttons to change the IP" , 0, 0, 0, 0],
	["IP No.3" , "CRASH box. Press buttons to change the IP" , 0, 0, 0, 0],
	["IP No.4" , "LINK  box. Press buttons to change the IP" , 0, 0, 0, 0],
	["IP No.5" , "TAILS box. Press buttons to change the IP" , 0, 0, 0, 0],
	["IP No.6" , "SNAKE box. Press buttons to change the IP" , 0, 0, 0, 0],
	["SAVE & EXIT" , "Save the changes and exit"]]


with open(netplaycfg, 'r') as file:
	for line in file:
		line = line.strip().split(' ')
		optl = line

		opt[0][2] = int(optl[0])
		opt[1][2] = int(optl[1])

		opt[2][2] = int(optl[2])
		opt[2][3] = int(optl[3])
		opt[2][4] = int(optl[4])
		opt[2][5] = int(optl[5])

		opt[3][2] = int(optl[6])
		opt[3][3] = int(optl[7])
		opt[3][4] = int(optl[8])
		opt[3][5] = int(optl[9])

		opt[4][2] = int(optl[10])
		opt[4][3] = int(optl[11])
		opt[4][4] = int(optl[12])
		opt[4][5] = int(optl[13])

		opt[5][2] = int(optl[14])
		opt[5][3] = int(optl[15])
		opt[5][4] = int(optl[16])
		opt[5][5] = int(optl[17])

		opt[6][2] = int(optl[18])
		opt[6][3] = int(optl[19])
		opt[6][4] = int(optl[20])
		opt[6][5] = int(optl[21])

		opt[7][2] = int(optl[22])
		opt[7][3] = int(optl[23])
		opt[7][4] = int(optl[24])
		opt[7][5] = int(optl[25])



#joystick read or close script
try:
	with open("/dev/input/js%s" % joystick, "rb") as f:
	#with open("/dev/input/js0", "rb") as f:

#comprobe inf first launch the host option is enabled
		if opt[1][2] > 0:
			y = 1

	# starting the main loop
		running = 1
		while running:

			a = f.read(8)
			t, value, code, index = struct.unpack("<ihbb", a) # 4 bytes, 2 bytes, 1 byte, 1 byte
			#print("t: {:10d} ms, value: {:6d}, code: {:1d}, index: {:1d}".format(t, value, code, index))

			#button
			if code == 1 and value == 1:
				# X boton -1
				if index == 2 or index == 4:
					if y == 2:
						if x == 0 and opt[2][2] > 0:
							opt[2][2] -= 1
						elif x == 1 and opt[2][3] > 0:
							opt[2][3] -= 1
						elif x == 2 and opt[2][4] > 0:
							opt[2][4] -= 1
						elif x == 3 and opt[2][5] > 0:
							opt[2][5] -= 1
					elif y == 3:
						if x == 0 and opt[3][2] > 0:
							opt[3][2] -= 1
						elif x == 1 and opt[3][3] > 0:
							opt[3][3] -= 1
						elif x == 2 and opt[3][4] > 0:
							opt[3][4] -= 1
						elif x == 3 and opt[3][5] > 0:
							opt[3][5] -= 1

					elif y ==4:
						if x == 0 and opt[4][2] > 0:
							opt[4][2] -= 1
						elif x == 1 and opt[4][3] > 0:
							opt[4][3] -= 1
						elif x == 2 and opt[4][4] > 0:
							opt[4][4] -= 1
						elif x == 3 and opt[4][5] > 0:
							opt[4][5] -= 1

					elif y == 5:
						if x == 0 and opt[5][2] > 0:
							opt[5][2] -= 1
						elif x == 1 and opt[5][3] > 0:
							opt[5][3] -= 1
						elif x == 2 and opt[5][4] > 0:
							opt[5][4] -= 1
						elif x == 3 and opt[5][5] > 0:
							opt[5][5] -= 1

					elif y == 6:
						if x == 0 and opt[6][2] > 0:
							opt[6][2] -= 1
						elif x == 1 and opt[6][3] > 0:
							opt[6][3] -= 1
						elif x == 2 and opt[6][4] > 0:
							opt[6][4] -= 1
						elif x == 3 and opt[6][5] > 0:
							opt[6][5] -= 1

					elif y == 7:
						if x == 0 and opt[7][2] > 0:
							opt[7][2] -= 1
						elif x == 1 and opt[7][3] > 0:
							opt[7][3] -= 1
						elif x == 2 and opt[7][4] > 0:
							opt[7][4] -= 1
						elif x == 3 and opt[7][5] > 0:
							opt[7][5] -= 1

					elif y == 8:
						save()
						pygame.display.quit
						pygame.quit()
						sys.exit()

				# O boton +1
				if index == 1:
					if y == 2:
						if x == 0 and opt[2][2] < 255:
							opt[2][2] += 1
						elif x == 1 and opt[2][3] < 255:
							opt[2][3] += 1
						elif x == 2 and opt[2][4] < 255:
							opt[2][4] += 1
						elif x == 3 and opt[2][5] < 255:
							opt[2][5] += 1
					elif y == 3:
						if x == 0 and opt[3][2] < 255:
							opt[3][2] += 1
						elif x == 1 and opt[3][3] < 255:
							opt[3][3] += 1
						elif x == 2 and opt[3][4] < 255:
							opt[3][4] += 1
						elif x == 3 and opt[3][5] < 255:
							opt[3][5] += 1

					elif y == 4:
						if x == 0 and opt[4][2] < 255:
							opt[4][2] += 1
						elif x == 1 and opt[4][3] < 255:
							opt[4][3] += 1
						elif x == 2 and opt[4][4] < 255:
							opt[4][4] += 1
						elif x == 3 and opt[4][5] < 255:
							opt[4][5] += 1

					elif y == 5:
						if x == 0 and opt[5][2] < 255:
							opt[5][2] += 1
						elif x == 1 and opt[5][3] < 255:
							opt[5][3] += 1
						elif x == 2 and opt[5][4] < 255:
							opt[5][4] += 1
						elif x == 3 and opt[5][5] < 255:
							opt[5][5] += 1

					elif y == 6:
						if x == 0 and opt[6][2] < 255:
							opt[6][2] += 1
						elif x == 1 and opt[6][3] < 255:
							opt[6][3] += 1
						elif x == 2 and opt[6][4] < 255:
							opt[6][4] += 1
						elif x == 3 and opt[6][5] < 255:
							opt[6][5] += 1

					elif y == 7:
						if x == 0 and opt[7][2] < 255:
							opt[7][2] += 1
						elif x == 1 and opt[7][3] < 255:
							opt[7][3] += 1
						elif x == 2 and opt[7][4] < 255:
							opt[7][4] += 1
						elif x == 3 and opt[7][5] < 255:
							opt[7][5] += 1

					elif y == 8:
						save()
						pygame.display.quit
						pygame.quit()
						sys.exit()

				# Triangulo boton +10
				if index == 0:
					if y == 2:
						if x == 0 and opt[2][2] < 246:
							opt[2][2] += 10
						elif x == 1 and opt[2][3] < 246:
							opt[2][3] += 10
						elif x == 2 and opt[2][4] < 246:
							opt[2][4] += 10
						elif x == 3 and opt[2][5] < 246:
							opt[2][5] += 10

					elif y == 3:
						if x == 0 and opt[3][2] < 246:
							opt[3][2] += 10
						elif x == 1 and opt[3][3] < 246:
							opt[3][3] += 10
						elif x == 2 and opt[3][4] < 246:
							opt[3][4] += 10
						elif x == 3 and opt[3][5] < 246:
							opt[3][5] += 10

					elif y == 4:
						if x == 0 and opt[4][2] < 246:
							opt[4][2] += 10
						elif x == 1 and opt[4][3] < 246:
							opt[4][3] += 10
						elif x == 2 and opt[4][4] < 246:
							opt[4][4] += 10
						elif x == 3 and opt[4][5] < 246:
							opt[4][5] += 10

					elif y == 5:
						if x == 0 and opt[5][2] < 246:
							opt[5][2] += 10
						elif x == 1 and opt[5][3] < 246:
							opt[5][3] += 10
						elif x == 2 and opt[5][4] < 246:
							opt[5][4] += 10
						elif x == 3 and opt[5][5] < 246:
							opt[5][5] += 10

					elif y == 6:
						if x == 0 and opt[6][2] < 246:
							opt[6][2] += 10
						elif x == 1 and opt[6][3] < 246:
							opt[6][3] += 10
						elif x == 2 and opt[6][4] < 246:
							opt[6][4] += 10
						elif x == 3 and opt[6][5] < 246:
							opt[6][5] += 10

					elif y == 7:
						if x == 0 and opt[7][2] < 246:
							opt[7][2] += 10
						elif x == 1 and opt[7][3] < 246:
							opt[7][3] += 10
						elif x == 2 and opt[7][4] < 246:
							opt[7][4] += 10
						elif x == 3 and opt[7][5] < 246:
							opt[7][5] += 10
							
				# Cuadrado -10 
				if index == 3:
					if y == 2:
						if x == 0 and opt[2][2] > 9:
							opt[2][2] -= 10
						elif x == 1 and opt[2][3] > 9:
							opt[2][3] -= 10
						elif x == 2 and opt[2][4] > 9:
							opt[2][4] -= 10
						elif x == 3 and opt[2][5] > 9:
							opt[2][5] -= 10

					elif y == 3:
						if x == 0 and opt[3][2] > 9:
							opt[3][2] -= 10
						elif x == 1 and opt[3][3] > 9:
							opt[3][3] -= 10
						elif x == 2 and opt[3][4] > 9:
							opt[3][4] -= 10
						elif x == 3 and opt[3][5] > 9:
							opt[3][5] -= 10

					elif y == 4:
						if x == 0 and opt[4][2] > 9:
							opt[4][2] -= 10
						elif x == 1 and opt[4][3] > 9:
							opt[4][3] -= 10
						elif x == 2 and opt[4][4] > 9:
							opt[4][4] -= 10
						elif x == 3 and opt[4][5] > 9:
							opt[4][5] -= 10

					elif y == 5:
						if x == 0 and opt[5][2] > 9:
							opt[5][2] -= 10
						elif x == 1 and opt[5][3] > 9:
							opt[5][3] -= 10
						elif x == 2 and opt[5][4] > 9:
							opt[5][4] -= 10
						elif x == 3 and opt[5][5] > 9:
							opt[5][5] -= 10

					elif y == 6:
						if x == 0 and opt[6][2] > 9:
							opt[6][2] -= 10
						elif x == 1 and opt[6][3] > 9:
							opt[6][3] -= 10
						elif x == 2 and opt[6][4] > 9:
							opt[6][4] -= 10
						elif x == 3 and opt[6][5] > 9:
							opt[6][5] -= 10

					elif y == 7:
						if x == 0 and opt[7][2] > 9:
							opt[7][2] -= 10
						elif x == 1 and opt[7][3] > 9:
							opt[7][3] -= 10
						elif x == 2 and opt[7][4] > 9:
							opt[7][4] -= 10
						elif x == 3 and opt[7][5] > 9:
							opt[7][5] -= 10

			#right		
			if code == 2 and index % 2 == 0:
				if value > 30000:
					if state_right == 0:
						state_right = value
						if y == 0:
							opt[0][2] = 1
						elif y == 1 and opt[1][2] < 6:
							opt[1][2] += 1
						elif y > 1 and x < 3:
							x += 1


				elif value < threshold:
					state_right = 0
					
			#left	
			if code == 2 and index % 2 == 0:
				if value < -30000:
					if state_left == 0:
						state_left = value
						if y == 0:
							opt[0][2] = 0
						elif y == 1 and opt[1][2] > 0:
							opt[1][2] -= 1
						elif y > 1 and x > 0:
							x -= 1

				elif value < threshold:
					state_left = 0

			#up			
			if code == 2 and index % 2 == 1:
				if value < -30000:
					if state_up == 0:
						state_up = value
						if y > 0 and opt[0][2] == 0:
							y -= 1

						elif y > 0 and opt[0][2] == 1:
							y = 0
			
						elif y == 0:
							y = 8

						if y == 0 and opt[1][2] > 0:
							y = 8
				elif value < threshold:
					state_up = 0

			#down
			if code == 2 and index % 2 == 1:
				if value > 30000:
					if state_down == 0:
						state_down = value
						if y < 8 and opt[0][2] == 0:
							y += 1

						elif y < 8 and opt[0][2] == 1:
							y = 8

						elif y == 8 and opt[1][2] > 0:
							y = 1

						elif y > 7:
							y = 0
				elif value < threshold:
					state_down = 0


						

			# SHOW BACKGROUND
			pygame.draw.rect(fullscreen, (black), (20,20,x_screen-40,y_screen-40), 0)

			#title and credits
			title = myfont.render("RGB-Pi EasyNetplay", 1, (color))
			fullscreen.blit(title, (32, 28))
			text_print("discord.gg/vmsQ4bs", 275, 28, 0, 200, 0)
			
			
			#list square
			pygame.draw.rect(fullscreen, (color), (32,44,x_screen-62,y_screen-90), 1)

			#list
			for i in range(0,9):
				option = y+y_slide
				fullscreen.blit((myfont.render(opt[i+y_slide][0], 1, (color))), (110, 50+i*20))
			

			# data values frawing
			#1 and 2 options
			host = myfont.render(str(opt[0][2]), 1, (color))
			fullscreen.blit(host, (data_x-(len(str(opt[0][2]))*8), 50))

			client = myfont.render(str(opt[1][2]), 1, (color))
			fullscreen.blit(client, (data_x-(len(str(opt[1][2]))*8), 70))

			# ip1
			ip1_1 = myfont.render(str(opt[2][2])+str("."), 1, (color))
			fullscreen.blit(ip1_1, (data_x-((len(str(opt[2][2]))*8)+(len(str(opt[2][3]))*8)+(len(str(opt[2][4]))*8)+(len(str(opt[2][5]))*8)+24), 90))

			ip1_2 = myfont.render(str(opt[2][3])+str("."), 1, (color))
			fullscreen.blit(ip1_2, (data_x-((len(str(opt[2][3]))*8)+(len(str(opt[2][4]))*8)+(len(str(opt[2][5]))*8)+16), 90))

			ip1_3 = myfont.render(str(opt[2][4])+str("."), 1, (color))
			fullscreen.blit(ip1_3, (data_x-((len(str(opt[2][4]))*8)+(len(str(opt[2][5]))*8)+8), 90))

			ip1_4 = myfont.render(str(opt[2][5]), 1, (color))
			fullscreen.blit(ip1_4, (data_x-(len(str(opt[2][5]))*8), 90))


			# ip2
			ip2_1 = myfont.render(str(opt[3][2])+str("."), 1, (color))
			fullscreen.blit(ip2_1, (data_x-((len(str(opt[3][2]))*8)+(len(str(opt[3][3]))*8)+(len(str(opt[3][4]))*8)+(len(str(opt[3][5]))*8)+24), 110))

			ip2_2 = myfont.render(str(opt[3][3])+str("."), 1, (color))
			fullscreen.blit(ip2_2, (data_x-((len(str(opt[3][3]))*8)+(len(str(opt[3][4]))*8)+(len(str(opt[3][5]))*8)+16), 110))

			ip2_3 = myfont.render(str(opt[3][4])+str("."), 1, (color))
			fullscreen.blit(ip2_3, (data_x-((len(str(opt[3][4]))*8)+(len(str(opt[3][5]))*8)+8), 110))

			ip2_4 = myfont.render(str(opt[3][5]), 1, (color))
			fullscreen.blit(ip2_4, (data_x-(len(str(opt[3][5]))*8), 110))

			# ip3
			ip3_1 = myfont.render(str(opt[4][2])+str("."), 1, (color))
			fullscreen.blit(ip3_1, (data_x-((len(str(opt[4][2]))*8)+(len(str(opt[4][3]))*8)+(len(str(opt[4][4]))*8)+(len(str(opt[4][5]))*8)+24), 130))

			ip3_2 = myfont.render(str(opt[4][3])+str("."), 1, (color))
			fullscreen.blit(ip3_2, (data_x-((len(str(opt[4][3]))*8)+(len(str(opt[4][4]))*8)+(len(str(opt[4][5]))*8)+16), 130))

			ip3_3 = myfont.render(str(opt[4][4])+str("."), 1, (color))
			fullscreen.blit(ip3_3, (data_x-((len(str(opt[4][4]))*8)+(len(str(opt[4][5]))*8)+8), 130))

			ip3_4 = myfont.render(str(opt[4][5]), 1, (color))
			fullscreen.blit(ip3_4, (data_x-(len(str(opt[4][5]))*8), 130))

			# ip4
			ip4_1 = myfont.render(str(opt[5][2])+str("."), 1, (color))
			fullscreen.blit(ip4_1, (data_x-((len(str(opt[5][2]))*8)+(len(str(opt[5][3]))*8)+(len(str(opt[5][4]))*8)+(len(str(opt[5][5]))*8)+24), 150))

			ip4_2 = myfont.render(str(opt[5][3])+str("."), 1, (color))
			fullscreen.blit(ip4_2, (data_x-((len(str(opt[5][3]))*8)+(len(str(opt[5][4]))*8)+(len(str(opt[5][5]))*8)+16), 150))

			ip4_3 = myfont.render(str(opt[5][4])+str("."), 1, (color))
			fullscreen.blit(ip4_3, (data_x-((len(str(opt[5][4]))*8)+(len(str(opt[5][5]))*8)+8), 150))

			ip4_4 = myfont.render(str(opt[5][5]), 1, (color))
			fullscreen.blit(ip4_4, (data_x-(len(str(opt[5][5]))*8), 150))

			# ip5
			ip5_1 = myfont.render(str(opt[6][2])+str("."), 1, (color))
			fullscreen.blit(ip5_1, (data_x-((len(str(opt[6][2]))*8)+(len(str(opt[6][3]))*8)+(len(str(opt[6][4]))*8)+(len(str(opt[6][5]))*8)+24), 170))

			ip5_2 = myfont.render(str(opt[6][3])+str("."), 1, (color))
			fullscreen.blit(ip5_2, (data_x-((len(str(opt[6][3]))*8)+(len(str(opt[6][4]))*8)+(len(str(opt[6][5]))*8)+16), 170))

			ip5_3 = myfont.render(str(opt[6][4])+str("."), 1, (color))
			fullscreen.blit(ip5_3, (data_x-((len(str(opt[6][4]))*8)+(len(str(opt[6][5]))*8)+8), 170))

			ip5_4 = myfont.render(str(opt[6][5]), 1, (color))
			fullscreen.blit(ip5_4, (data_x-(len(str(opt[6][5]))*8), 170))

			# ip6
			ip6_1 = myfont.render(str(opt[7][2])+str("."), 1, (color))
			fullscreen.blit(ip6_1, (data_x-((len(str(opt[7][2]))*8)+(len(str(opt[7][3]))*8)+(len(str(opt[7][4]))*8)+(len(str(opt[7][5]))*8)+24), 190))

			ip6_2 = myfont.render(str(opt[7][3])+str("."), 1, (color))
			fullscreen.blit(ip6_2, (data_x-((len(str(opt[7][3]))*8)+(len(str(opt[7][4]))*8)+(len(str(opt[7][5]))*8)+16), 190))

			ip6_3 = myfont.render(str(opt[7][4])+str("."), 1, (color))
			fullscreen.blit(ip6_3, (data_x-((len(str(opt[7][4]))*8)+(len(str(opt[7][5]))*8)+8), 190))

			ip6_4 = myfont.render(str(opt[7][5]), 1, (color))
			fullscreen.blit(ip6_4, (data_x-(len(str(opt[7][5]))*8), 190))

			# anulations drawings
			if opt[0][2] == 1:

				for i in range(1,8):
					option = y+y_slide
					fullscreen.blit((myfont.render(opt[i+y_slide][0], 1, (dark))), (110, 50+i*20))

				client = myfont.render(str(opt[1][2]), 1, (dark))
				fullscreen.blit(client, (data_x-(len(str(opt[1][2]))*8), 70))

				#anule ip1
				ip1_1 = myfont.render(str(opt[2][2])+str("."), 1, (dark))
				fullscreen.blit(ip1_1, (data_x-((len(str(opt[2][5]))*8)+(len(str(opt[2][4]))*8)+(len(str(opt[2][3]))*8)+(len(str(opt[2][2]))*8)+24), 90))

				ip1_2 = myfont.render(str(opt[2][3])+str("."), 1, (dark))
				fullscreen.blit(ip1_2, (data_x-((len(str(opt[2][5]))*8)+(len(str(opt[2][4]))*8)+(len(str(opt[2][3]))*8)+16), 90))

				ip1_3 = myfont.render(str(opt[2][4])+str("."), 1, (dark))
				fullscreen.blit(ip1_3, (data_x-((len(str(opt[2][5]))*8)+(len(str(opt[2][4]))*8)+8), 90))

				ip1_4 = myfont.render(str(opt[2][5]), 1, (dark))
				fullscreen.blit(ip1_4, (data_x-(len(str(opt[2][5]))*8), 90))

				#anule ip2
				ip1_1 = myfont.render(str(opt[3][2])+str("."), 1, (dark))
				fullscreen.blit(ip1_1, (data_x-((len(str(opt[3][5]))*8)+(len(str(opt[3][4]))*8)+(len(str(opt[3][3]))*8)+(len(str(opt[3][2]))*8)+24), 110))

				ip1_2 = myfont.render(str(opt[3][3])+str("."), 1, (dark))
				fullscreen.blit(ip1_2, (data_x-((len(str(opt[3][5]))*8)+(len(str(opt[3][4]))*8)+(len(str(opt[3][3]))*8)+16), 110))

				ip1_3 = myfont.render(str(opt[3][4])+str("."), 1, (dark))
				fullscreen.blit(ip1_3, (data_x-((len(str(opt[3][5]))*8)+(len(str(opt[3][4]))*8)+8), 110))

				ip1_4 = myfont.render(str(opt[3][5]), 1, (dark))
				fullscreen.blit(ip1_4, (data_x-(len(str(opt[3][5]))*8), 110))

				#anule ip3
				ip1_1 = myfont.render(str(opt[4][2])+str("."), 1, (dark))
				fullscreen.blit(ip1_1, (data_x-((len(str(opt[4][5]))*8)+(len(str(opt[4][4]))*8)+(len(str(opt[4][3]))*8)+(len(str(opt[4][2]))*8)+24), 130))

				ip1_2 = myfont.render(str(opt[4][3])+str("."), 1, (dark))
				fullscreen.blit(ip1_2, (data_x-((len(str(opt[4][5]))*8)+(len(str(opt[4][4]))*8)+(len(str(opt[4][3]))*8)+16), 130))

				ip1_3 = myfont.render(str(opt[4][4])+str("."), 1, (dark))
				fullscreen.blit(ip1_3, (data_x-((len(str(opt[4][5]))*8)+(len(str(opt[4][4]))*8)+8), 130))

				ip1_4 = myfont.render(str(opt[4][5]), 1, (dark))
				fullscreen.blit(ip1_4, (data_x-(len(str(opt[4][5]))*8), 130))

				#anule ip4
				ip1_1 = myfont.render(str(opt[5][2])+str("."), 1, (dark))
				fullscreen.blit(ip1_1, (data_x-((len(str(opt[5][5]))*8)+(len(str(opt[5][4]))*8)+(len(str(opt[5][3]))*8)+(len(str(opt[5][2]))*8)+24), 150))

				ip1_2 = myfont.render(str(opt[5][3])+str("."), 1, (dark))
				fullscreen.blit(ip1_2, (data_x-((len(str(opt[5][5]))*8)+(len(str(opt[5][4]))*8)+(len(str(opt[5][3]))*8)+16), 150))

				ip1_3 = myfont.render(str(opt[5][4])+str("."), 1, (dark))
				fullscreen.blit(ip1_3, (data_x-((len(str(opt[5][5]))*8)+(len(str(opt[5][4]))*8)+8), 150))

				ip1_4 = myfont.render(str(opt[5][5]), 1, (dark))
				fullscreen.blit(ip1_4, (data_x-(len(str(opt[5][5]))*8), 150))

				#anule ip5
				ip1_1 = myfont.render(str(opt[6][2])+str("."), 1, (dark))
				fullscreen.blit(ip1_1, (data_x-((len(str(opt[6][5]))*8)+(len(str(opt[6][4]))*8)+(len(str(opt[6][3]))*8)+(len(str(opt[6][2]))*8)+24), 170))

				ip1_2 = myfont.render(str(opt[6][3])+str("."), 1, (dark))
				fullscreen.blit(ip1_2, (data_x-((len(str(opt[6][5]))*8)+(len(str(opt[6][4]))*8)+(len(str(opt[6][3]))*8)+16), 170))

				ip1_3 = myfont.render(str(opt[6][4])+str("."), 1, (dark))
				fullscreen.blit(ip1_3, (data_x-((len(str(opt[6][5]))*8)+(len(str(opt[6][4]))*8)+8), 170))

				ip1_4 = myfont.render(str(opt[6][5]), 1, (dark))
				fullscreen.blit(ip1_4, (data_x-(len(str(opt[6][5]))*8), 170))

				#anule ip6
				ip1_1 = myfont.render(str(opt[7][2])+str("."), 1, (dark))
				fullscreen.blit(ip1_1, (data_x-((len(str(opt[7][5]))*8)+(len(str(opt[7][4]))*8)+(len(str(opt[7][3]))*8)+(len(str(opt[7][2]))*8)+24), 190))

				ip1_2 = myfont.render(str(opt[7][3])+str("."), 1, (dark))
				fullscreen.blit(ip1_2, (data_x-((len(str(opt[7][5]))*8)+(len(str(opt[7][4]))*8)+(len(str(opt[7][3]))*8)+16), 190))

				ip1_3 = myfont.render(str(opt[7][4])+str("."), 1, (dark))
				fullscreen.blit(ip1_3, (data_x-((len(str(opt[7][5]))*8)+(len(str(opt[7][4]))*8)+8), 190))

				ip1_4 = myfont.render(str(opt[7][5]), 1, (dark))
				fullscreen.blit(ip1_4, (data_x-(len(str(opt[7][5]))*8), 190))

			if opt[1][2] > 0:

				for i in range(0,1):
					option = y+y_slide
					fullscreen.blit((myfont.render(opt[i+y_slide][0], 1, (dark))), (110, 50+i*20))

				host = myfont.render(str(opt[0][2]), 1, (dark))
				fullscreen.blit(host, (data_x-(len(str(opt[0][2]))*8), 50))



			# list selection and square and arrows
			pygame.draw.rect(fullscreen, (color), (32,44+y*20,x_screen-62,20))
			fullscreen.blit((myfont.render(opt[option][0], 1, (0,0,0))), (110, 50+y*20))

			if y < 2:

				listrndr = myfont.render(str(opt[option][2]), 1, (black))
				fullscreen.blit(listrndr, (data_x-(len(str(opt[option][2]))*8), 50+y*20))

				#option 1:
				if y == 0 and opt[0][2] == 0:
					draw_arrow_right()
				if y == 0 and opt[0][2] == 1:
					draw_arrow_left()

				#option 2:
				if y == 1 and opt[1][2] < 6:
					draw_arrow_right()
				if y == 1 and opt[1][2] > 0:
					draw_arrow_left()

			#option 3 to 8
			if y > 1 and y < 8:

				#black drawing
				listrndr1 = myfont.render(str(opt[option][2])+str("."), 1, (black))
				fullscreen.blit(listrndr1, (data_x-((len(str(opt[option][5]))*8)+(len(str(opt[option][4]))*8)+(len(str(opt[option][3]))*8)+(len(str(opt[option][2]))*8)+24), 50+y*20))

				listrndr2 = myfont.render(str(opt[option][3])+str("."), 1, (black))
				fullscreen.blit(listrndr2, (data_x-((len(str(opt[option][5]))*8)+(len(str(opt[option][4]))*8)+(len(str(opt[option][3]))*8)+16), 50+y*20))

				listrndr3 = myfont.render(str(opt[option][4])+str("."), 1, (black))
				fullscreen.blit(listrndr3, (data_x-((len(str(opt[option][5]))*8)+(len(str(opt[option][4]))*8)+8), 50+y*20))

				listrndr4 = myfont.render(str(opt[option][5]), 1, (black))
				fullscreen.blit(listrndr4, (data_x-(len(str(opt[option][5]))*8), 50+y*20))

				#draw cursor ip1
				if y == 2:
					if x == 0:
						ip1_1 = myfont.render(str(opt[2][2]), 1, (dark))
						fullscreen.blit(ip1_1, (data_x-((len(str(opt[2][5]))*8)+(len(str(opt[2][4]))*8)+(len(str(opt[2][3]))*8)+(len(str(opt[2][2]))*8)+24), 90))

					elif x == 1:
						ip1_2 = myfont.render(str(opt[2][3]), 1, (dark))
						fullscreen.blit(ip1_2, (data_x-((len(str(opt[2][5]))*8)+(len(str(opt[2][4]))*8)+(len(str(opt[2][3]))*8)+16), 90))

					elif x == 2:
						ip1_3 = myfont.render(str(opt[2][4]), 1, (dark))
						fullscreen.blit(ip1_3, (data_x-((len(str(opt[2][5]))*8)+(len(str(opt[2][4]))*8)+8), 90))

					elif x == 3:
						ip1_4 = myfont.render(str(opt[2][5]), 1, (dark))
						fullscreen.blit(ip1_4, (data_x-(len(str(opt[2][5]))*8), 90))


				#draw cursor ip2
				if y == 3:
					if x == 0:
						ip1_1 = myfont.render(str(opt[3][2]), 1, (dark))
						fullscreen.blit(ip1_1, (data_x-((len(str(opt[3][5]))*8)+(len(str(opt[3][4]))*8)+(len(str(opt[3][3]))*8)+(len(str(opt[3][2]))*8)+24), 110))

					elif x == 1:
						ip1_2 = myfont.render(str(opt[3][3]), 1, (dark))
						fullscreen.blit(ip1_2, (data_x-((len(str(opt[3][5]))*8)+(len(str(opt[3][4]))*8)+(len(str(opt[3][3]))*8)+16), 110))

					elif x == 2:
						ip1_3 = myfont.render(str(opt[3][4]), 1, (dark))
						fullscreen.blit(ip1_3, (data_x-((len(str(opt[3][5]))*8)+(len(str(opt[3][4]))*8)+8), 110))

					elif x == 3:
						ip1_4 = myfont.render(str(opt[3][5]), 1, (dark))
						fullscreen.blit(ip1_4, (data_x-(len(str(opt[3][5]))*8), 110))

				#draw cursor ip3
				if y == 4:
					if x == 0:
						ip1_1 = myfont.render(str(opt[4][2]), 1, (dark))
						fullscreen.blit(ip1_1, (data_x-((len(str(opt[4][5]))*8)+(len(str(opt[4][4]))*8)+(len(str(opt[4][3]))*8)+(len(str(opt[4][2]))*8)+24), 130))

					elif x == 1:
						ip1_2 = myfont.render(str(opt[4][3]), 1, (dark))
						fullscreen.blit(ip1_2, (data_x-((len(str(opt[4][5]))*8)+(len(str(opt[4][4]))*8)+(len(str(opt[4][3]))*8)+16), 130))

					elif x == 2:
						ip1_3 = myfont.render(str(opt[4][4]), 1, (dark))
						fullscreen.blit(ip1_3, (data_x-((len(str(opt[4][5]))*8)+(len(str(opt[4][4]))*8)+8), 130))

					elif x == 3:
						ip1_4 = myfont.render(str(opt[4][5]), 1, (dark))
						fullscreen.blit(ip1_4, (data_x-(len(str(opt[4][5]))*8), 130))

				#draw cursor ip4
				if y == 5:
					if x == 0:
						ip1_1 = myfont.render(str(opt[5][2]), 1, (dark))
						fullscreen.blit(ip1_1, (data_x-((len(str(opt[5][5]))*8)+(len(str(opt[5][4]))*8)+(len(str(opt[5][3]))*8)+(len(str(opt[5][2]))*8)+24), 150))

					elif x == 1:
						ip1_2 = myfont.render(str(opt[5][3]), 1, (dark))
						fullscreen.blit(ip1_2, (data_x-((len(str(opt[5][5]))*8)+(len(str(opt[5][4]))*8)+(len(str(opt[5][3]))*8)+16), 150))

					elif x == 2:
						ip1_3 = myfont.render(str(opt[5][4]), 1, (dark))
						fullscreen.blit(ip1_3, (data_x-((len(str(opt[5][5]))*8)+(len(str(opt[5][4]))*8)+8), 150))

					elif x == 3:
						ip1_4 = myfont.render(str(opt[5][5]), 1, (dark))
						fullscreen.blit(ip1_4, (data_x-(len(str(opt[5][5]))*8), 150))

				#draw cursor ip5
				if y == 6:
					if x == 0:
						ip1_1 = myfont.render(str(opt[6][2]), 1, (dark))
						fullscreen.blit(ip1_1, (data_x-((len(str(opt[6][5]))*8)+(len(str(opt[6][4]))*8)+(len(str(opt[6][3]))*8)+(len(str(opt[6][2]))*8)+24), 170))

					elif x == 1:
						ip1_2 = myfont.render(str(opt[6][3]), 1, (dark))
						fullscreen.blit(ip1_2, (data_x-((len(str(opt[6][5]))*8)+(len(str(opt[6][4]))*8)+(len(str(opt[6][3]))*8)+16), 170))

					elif x == 2:
						ip1_3 = myfont.render(str(opt[6][4]), 1, (dark))
						fullscreen.blit(ip1_3, (data_x-((len(str(opt[6][5]))*8)+(len(str(opt[6][4]))*8)+8), 170))

					elif x == 3:
						ip1_4 = myfont.render(str(opt[6][5]), 1, (dark))
						fullscreen.blit(ip1_4, (data_x-(len(str(opt[6][5]))*8), 170))

				#draw cursor ip6
				if y == 7:
					if x == 0:
						ip1_1 = myfont.render(str(opt[7][2]), 1, (dark))
						fullscreen.blit(ip1_1, (data_x-((len(str(opt[7][5]))*8)+(len(str(opt[7][4]))*8)+(len(str(opt[7][3]))*8)+(len(str(opt[7][2]))*8)+24), 190))

					elif x == 1:
						ip1_2 = myfont.render(str(opt[7][3]), 1, (dark))
						fullscreen.blit(ip1_2, (data_x-((len(str(opt[7][5]))*8)+(len(str(opt[7][4]))*8)+(len(str(opt[7][3]))*8)+16), 190))

					elif x == 2:
						ip1_3 = myfont.render(str(opt[7][4]), 1, (dark))
						fullscreen.blit(ip1_3, (data_x-((len(str(opt[7][5]))*8)+(len(str(opt[7][4]))*8)+8), 190))

					elif x == 3:
						ip1_4 = myfont.render(str(opt[7][5]), 1, (dark))
						fullscreen.blit(ip1_4, (data_x-(len(str(opt[7][5]))*8), 190))



			
				
			# SHOW description on bootom in yellow and case
			fullscreen.blit((myfont.render(opt[y+y_slide][1], 1, (color))), (38, y_screen-43))
			pygame.draw.rect(fullscreen, (color), (32,223,x_screen-62,16), 1)


			
			pygame.display.flip()


except IOError:
	sorry = myfont.render("Joystick not detected", 1, (color))
	fullscreen.blit(sorry, (140, 120))
	pygame.display.flip()
	time.sleep(5)
	pygame.display.quit
	sys.exit()



